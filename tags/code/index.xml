<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code on Daniele Antonioli</title>
    <link>https://francozappa.github.io/tags/code/</link>
    <description>Recent content in code on Daniele Antonioli</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 Daniele Antonioli</copyright>
    <lastBuildDate>Sun, 18 Aug 2019 00:00:00 -0700</lastBuildDate>
    
	<atom:link href="https://francozappa.github.io/tags/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>KNOB Attack Code for E0 and Slides from USEC19 are Online</title>
      <link>https://francozappa.github.io/post/knob-repo2/</link>
      <pubDate>Sun, 18 Aug 2019 00:00:00 -0700</pubDate>
      
      <guid>https://francozappa.github.io/post/knob-repo2/</guid>
      <description>The code that we developed to validate and brute force E0 encryption keys is online.
The slides of my KNOB attack USEC19 talk are also online. As we can see from the slides, the KNOB attack is not conducted while two Bluetooth devices are pairing, but when two devices are connecting (establishing a new encrypted session). Bluetooth (BR/EDR) is a technology with a pair-once connect-multiple-times paradigm. For example, you pair your smartphone with your car once, and then every day you connect the two and the devices negotiate a new (fresh) encryption key.</description>
    </item>
    
    <item>
      <title>KNOB Attack Repository is Online</title>
      <link>https://francozappa.github.io/post/knob-repo/</link>
      <pubDate>Fri, 16 Aug 2019 00:00:00 -0700</pubDate>
      
      <guid>https://francozappa.github.io/post/knob-repo/</guid>
      <description>Our KNOB repository is online, and it includes our PoC.
For more information visit knobattack.com</description>
    </item>
    
    <item>
      <title>NDSS 2019 camera-ready and PoC attack code</title>
      <link>https://francozappa.github.io/post/ndss19-cr/</link>
      <pubDate>Wed, 23 Jan 2019 00:00:00 -0800</pubDate>
      
      <guid>https://francozappa.github.io/post/ndss19-cr/</guid>
      <description>The camera-ready version of Nearby Threats: Reversing‚ Analyzing‚ and Attacking Google&amp;rsquo;s &amp;ldquo;Nearby Connections&amp;rdquo; on Android is available here
We also released a proof of concept code to perform the Soft AP manipulation attack. The code was previously disclosed to Google. In summary, the attack allows a malicious Nearby Connections server (advertiser) to redirect a client to a malicious Internet connected access point. As a result the attacker can reconfigure the wireless network interface of the victim via DHCP and gets access to all the Wi-Fi traffic (even traffic from non Nearby Connections applications).</description>
    </item>
    
    <item>
      <title>S317: MiniCPS Challenges</title>
      <link>https://francozappa.github.io/post/minicps-s3-code/</link>
      <pubDate>Tue, 21 Nov 2017 14:28:36 +0800</pubDate>
      
      <guid>https://francozappa.github.io/post/minicps-s3-code/</guid>
      <description>I recently open-sourced the code that I developed for the MiniCPS challenges for the SWaT Security Showdown (S3) event in 2017.
Here is the code.
The init.sh contains the list of commands that I run on a local testing machine and on the remote AWS instances that we used during the event. The attackers were provided with the VPN credentials to access two different subnetworks in a mixed MiniCPS simulation eg: water treatment (SWaT) and water distribution (WaDI).</description>
    </item>
    
  </channel>
</rss>